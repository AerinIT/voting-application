
local.file_match "local_files" {
    path_targets = [{"__path__" = "/var/log/*.log"}]
    sync_period = "5s"
}

// Scrape the log files
loki.source.file "log_scrape" {
    targets    = local.file_match.local_files.targets
    forward_to = [loki.process.filter_logs.receiver]
    tail_from_end = true
}

// Process and filter logs
loki.process "filter_logs" {
    stage.drop {
        source = ""
        expression  = ".*Connection closed by authenticating user root"
        drop_counter_reason = "noisy"
    }
    forward_to = [loki.write.grafana_loki.receiver]
}

// Send logs to Loki
loki.write "grafana_loki" {
    endpoint {
        url = "http://localhost:3100/loki/api/v1/push"
    }
}
//////////////////////////////////////////
//mimir

prometheus.exporter.unix "default" {
}

prometheus.scrape "unix" {
    targets = prometheus.exporter.unix.default.targets
    forward_to = [prometheus.remote_write.mimir.receiver]
    job_name = "node_exporter"
}

prometheus.scrape "app_server" {
  targets = [
    {
      __address__ = "server:9464",
    },
  ]
  forward_to     = [prometheus.remote_write.mimir.receiver]
  job_name       = "app-server"
  scrape_timeout = "60s"
}

prometheus.remote_write "mimir" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".metrics.url")[0]
        basic_auth {
            username = json_path(local.file.endpoints.content, ".metrics.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".metrics.basicAuth.password")[0]
        }
    }
}
local.file "endpoints" {
    filename = "/etc/alloy/endpoints.json"
}
prometheus.scrape "mythical" {
    targets = [
        {"__address__" = "mythical-server:5000", group = "mythical", service = "mythical-server"},
        {"__address__" = "mythical-requester:4001", group = "mythical", service = "mythical-requester"},
    ]
    scrape_interval = "2s"
    scrape_timeout = "2s"
    forward_to = [prometheus.remote_write.mimir.receiver]
    job_name = "mythical"
}
loki.source.api "mythical" {
    http {
        listen_address = "0.0.0.0"
        listen_port = "3100"
    }
    forward_to = [loki.process.mythical.receiver]
}

loki.process "mythical" {
    stage.regex {
        expression=`^.*?loggedtime=(?P<loggedtime>\S+)`
    }
    stage.timestamp {
        source = "loggedtime"
        format = "2006-01-02T15:04:05.000Z07:00"
    }
    forward_to = [loki.write.mythical.receiver]
}
loki.write "mythical" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".logs.url")[0]
        basic_auth {
            username = json_path(local.file.endpoints.content, ".logs.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".logs.basicAuth.password")[0]
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// Tracing

otelcol.receiver.otlp "otlp_receiver" {
    grpc {
        endpoint = "0.0.0.0:4317"
    }
    output {
        traces = [
            otelcol.processor.batch.default.input,
            otelcol.connector.spanlogs.autologging.input,
            otelcol.connector.spanmetrics.tracemetrics.input,
            otelcol.connector.servicegraph.tracemetrics.input,
        ]
    }
}

otelcol.processor.batch "default" {
    send_batch_size = 1000
    send_batch_max_size = 2000
    timeout = "2s"
    output {
        traces = [otelcol.exporter.otlp.tempo.input]
    }
}

otelcol.exporter.otlp "tempo" {
    client {
        auth = otelcol.auth.headers.tempo.handler
        endpoint = json_path(local.file.endpoints.content, ".traces.url")[0]
        tls {
            insecure = json_path(local.file.endpoints.content, ".traces.tls.insecure")[0]
            insecure_skip_verify = json_path(local.file.endpoints.content, ".traces.tls.insecureSkipVerify")[0]
        }
    }
}

otelcol.auth.headers "tempo" {
    header {
        key = "Authorization"
        value = join(["Basic ", json_path(local.file.endpoints.content, ".traces.basicAuthToken")[0]], "")
    }
}

otelcol.connector.spanlogs "autologging" {
    spans = false
    roots = true
    processes = false
    span_attributes = [ "http.method", "http.target", "http.status_code" ]
    overrides {
        trace_id_key = "traceId"
    }
    output {
        logs = [otelcol.exporter.loki.autologging.input]
    }
}

otelcol.exporter.loki "autologging" {
    forward_to = [loki.process.autologging.receiver]
}

loki.process "autologging" {
    stage.json {
        expressions = { 
            "body" = "",
            "timestamp" = "time",
            "level" = "level",
            "service" = "service.name",
            "trace_id" = "traceId",
        }
    }
    
    stage.timestamp {
        source = "timestamp"
        format = "RFC3339"
    }
    
    stage.structured_metadata {
        values = {
            env = "production",  // This can be changed to a variable if needed
            service = "",
            trace_id = "",
            log_type = "structured_metadata",
            level = "",
            user = "unknown",  // Default value, can be overwritten if user info is available
        }
    }
    
    stage.output {
        source = "body"
    }
    
    forward_to = [loki.write.autologging.receiver]
}

loki.write "autologging" {
    external_labels = {
        job = "alloy",
    }
    endpoint {
        url = json_path(local.file.endpoints.content, ".logs.url")[0]
    }
}

otelcol.connector.spanmetrics "tracemetrics" {
    namespace = "traces.spanmetrics"
    dimension {
        name = "http.method"
    }
    dimension {
        name = "http.target"
    }
    dimension {
        name = "http.status_code"
    }
    dimension {
        name = "service.version"
    }
    histogram {
        explicit {}
    }
    exemplars {
        enabled = true
    }
    output {
        metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}

otelcol.exporter.prometheus "tracemetrics" {
    forward_to = [prometheus.remote_write.mimir.receiver]
}


otelcol.connector.servicegraph "tracemetrics" {
    dimensions = [
        "http.method",
        "http.target",
        "http.status_code",
        "service.version",
    ]
    output {
        metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}