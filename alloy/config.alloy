logging {
  level = "info"
  format = "logfmt"
}

local.file_match "tmplogs" {
    path_targets = [{"__path__" = "/tmp/alloy-logs/*.log"}]
}

loki.source.file "local_files" {
    targets    = local.file_match.tmplogs.targets
    forward_to = [loki.process.alloy.receiver]
}

loki.process "alloy" {
    stage.logfmt {
        mapping = {
            "extracted_level" = "level",
            "extracted_msg" = "msg",
        }
    }

    stage.labels {
        values = {
            "level" = "extracted_level",
            "msg" = "extracted_msg",
        }
    }

    forward_to = [loki.relabel.add_static_label.receiver]
}

loki.relabel "add_static_label" {
    forward_to = [loki.write.local_loki.receiver]

    rule {
        target_label = "os"
        replacement  = constants.os
    }
}

loki.write "local_loki" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
    }
}




otelcol.receiver.otlp "otlp_receiver" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces = [otelcol.exporter.otlp.primesis_grafana.input]
  }
}

otelcol.exporter.otlp "primesis_grafana" {
  client {
    endpoint = "http://tempo:3200/api/v1/push"
  }
}

prometheus.scrape "app_server" {
  targets = [
    {
      __address__ = "server:5000",
    },
  ]
  forward_to     = [prometheus.remote_write.mimir.receiver]
  job_name       = "app-server"
  scrape_timeout = "60s"
}

prometheus.remote_write "mimir" { 
  endpoint {
    name = "grafana-mimir"
    url  = "http://mimir:9009/api/v1/push"
  }
}