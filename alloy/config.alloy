local.file_match "local_files" {
    path_targets = [{"__path__" = "/var/log/*.log"}]
    sync_period = "5s"
}

// Scrape the log files
loki.source.file "log_scrape" {
    targets    = local.file_match.local_files.targets
    forward_to = [loki.process.filter_logs.receiver]
    tail_from_end = true
}

// Process and filter logs
loki.process "filter_logs" {
    stage.drop {
        source = ""
        expression  = ".*Connection closed by authenticating user root"
        drop_counter_reason = "noisy"
    }
    forward_to = [loki.write.grafana_loki.receiver]
}

// Send logs to Loki
loki.write "grafana_loki" {
    endpoint {
        url = "http://localhost:3100/loki/api/v1/push"
    }
}


otelcol.receiver.otlp "otlp_receiver" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces = [otelcol.exporter.otlp.grafanacloud.input,]
  }
}

otelcol.exporter.otlp "grafanacloud" {
  client {
    endpoint = "tempo:4317"
    tls {
			insecure = true
		}
  }
}


prometheus.scrape "app_server" {
  targets = [
    {
      __address__ = "server:9464",
    },
  ]
  forward_to     = [prometheus.remote_write.mimir.receiver]
  job_name       = "app-server"
  scrape_timeout = "60s"
}

prometheus.remote_write "mimir" { 
  endpoint {
    name = "grafana-mimir"
    url  = "http://mimir:9009/api/v1/push"
  }
}