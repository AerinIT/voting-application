version: '3.9'
services:
  server:
    build:
      context: ./voting-app-server
    container_name: voting-app-server
    ports:
      - "5000:5000"
      - "9464:9464"
    volumes:
      - server-data:/app/data
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:12345
    depends_on:
      - redis
      - alloy
    networks:
      - voting-app-network

  client:
    build:
      context: ./voting-app-client
    container_name: voting-app-client
    ports:
      - "3001:3001"
    volumes:
      - client-data:/usr/share/nginx/html
    depends_on:
      - server
    networks:
      - voting-app-network

  redis:
    image: redis:alpine
    container_name: voting-app-redis
    ports:
      - "6379:6379"
    networks:
      - voting-app-network

  nginx:
    image: nginx:alpine
    container_name: voting-app-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - client
      - server
    networks:
      - voting-app-network

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - "./alloy/config.alloy:/etc/alloy/config.alloyz"
      - "./alloy/endpoints.json:/etc/alloy/endpoints.json"
    ports:
      - "12345:12345"
      - "4318:4318"
      - "4317:4317"
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    depends_on:
      - loki
      - tempo
      - mimir
    networks:
      - voting-app-network

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    command: 
      - --config.file=/etc/loki/local-config.yaml
    networks:
      - voting-app-network

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    restart: on-failure
    command:
      - "-storage.trace.backend=local"
      - "-storage.trace.local.path=/tmp/tempo/traces"
      - "-storage.trace.wal.path=/tmp/tempo/wal"
      - "-auth.enabled=false"
      - "-server.http-listen-port=3200"
    ports:
      - "3200:3200"  
      - "9095:9095" 
    networks:
      - voting-app-network
    volumes:
      - /tmp/tempo/traces:/tmp/tempo/traces 
      - /tmp/tempo/wal:/tmp/tempo/wal 

  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    ports:
      - "9009:9009"
    volumes:
      - ./mimir/mimir-config.yaml:/etc/mimir/mimir.yaml
    command:
      - --config.file=/etc/mimir/mimir.yaml
    networks:
      - voting-app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/:/etc/grafana/provisioning
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - mimir
      - loki
      - tempo
    networks:
      - voting-app-network

  # A RabbitMQ queue used to send message between the requester and the server microservices.
  mythical-queue:
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_running
      interval: 5s
      timeout: 30s
      retries: 10

  # A postgres DB used to store data by the API server microservice.
  mythical-database:
    image: postgres:14.5
    restart: always
    environment:
      POSTGRES_PASSWORD: "mythical"
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    networks:
      - voting-app-network
  # A microservice that makes requests to the API server microservice. Requests are also pushed onto the mythical-queue.
  mythical-requester:
    #build:
    #  context: ./source
    #  dockerfile: docker/Dockerfile
    #  args:
    #    SERVICE: mythical-beasts-requester
    image: grafana/intro-to-mltp:mythical-beasts-requester-latest
    restart: always
    depends_on:
      mythical-queue:
        condition: service_healthy
      mythical-server:
        condition: service_started
    ports:
      - "4001:4001"
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://alloy:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=alloy
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.4
      # Uncomment this line to enable timeshift example in the mythical-requester service, which will use timestamps
      # in the log lines themselves to rewrite the default timestamp to the time specified in the logline.
      #- TIMESHIFT=true
    networks:
      - voting-app-network
  # The API server microservice.
  # It writes logs directly to the Loki service, exposes metrics for the Prometheus
  # service and sends traces to the Grafana Alloy instance.
  mythical-server:
    #build:
    #  context: ./source
    #  dockerfile: docker/Dockerfile
    #  args:
    #    SERVICE: mythical-beasts-server
    image: grafana/intro-to-mltp:mythical-beasts-server-latest
    restart: always
    ports:
      - "4000:4000"
      - "8080:80"
    depends_on:
      - mythical-database
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://alloy:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=alloy
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.5
    networks:
      - voting-app-network
  # A microservice that consumes requests from the mythical-queue
  mythical-recorder:
    #build:
    #  context: ./source
    #  dockerfile: docker/Dockerfile
    #  args:
    #    SERVICE: mythical-beasts-recorder
    image: grafana/intro-to-mltp:mythical-beasts-recorder-latest
    restart: always
    depends_on:
      mythical-queue:
        condition: service_healthy
    ports:
      - "4002:4002"
    environment:
      - NAMESPACE=production
      - LOGS_TARGET=http://alloy:3100/loki/api/v1/push
      - TRACING_COLLECTOR_HOST=alloy
      - TRACING_COLLECTOR_PORT=4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_RESOURCE_ATTRIBUTES=ip=1.2.3.5

  k6:
    image: grafana/k6:0.53.0
    volumes:
      - "./k6:/scripts"
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://mimir:9009/api/v1/push
      - K6_DURATION=3600s
      - K6_VUS=4
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    restart: always
    command: ["run", "-o", "experimental-prometheus-rw", "/scripts/mythical-loadtest.js"]
    networks:
      - voting-app-network
  pyroscope:
    image: grafana/pyroscope:1.8.0
    ports:
      - "4040:4040"
    command: ["server"]
    networks:
      - voting-app-network

networks:
  voting-app-network:
    driver: bridge

volumes:
  server-data:
  client-data:
  grafana-data:
  postgres-data:
  tempo-data:
    driver: local